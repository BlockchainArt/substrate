// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-08-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn instrument(c: u32, ) -> Weight;
	fn code_load(c: u32, ) -> Weight;
	fn code_refcount(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn claim_surcharge(c: u32, ) -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_tombstone_deposit(r: u32, ) -> Weight;
	fn seal_rent_allowance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_restore_to(r: u32, ) -> Weight;
	fn seal_restore_to_per_delta(d: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_set_rent_allowance(r: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(3_323_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_350_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(158_387_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((39_461_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	fn instrument(c: u32, ) -> Weight {
		(33_203_000 as Weight)
			// Standard Error: 110_000
			.saturating_add((76_504_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn code_load(c: u32, ) -> Weight {
		(6_741_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_669_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	fn code_refcount(c: u32, ) -> Weight {
		(10_937_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_694_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts AccountCounter (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(558_616_000 as Weight)
			// Standard Error: 294_000
			.saturating_add((381_602_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 19_000
			.saturating_add((2_309_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn instantiate(s: u32, ) -> Weight {
		(276_361_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_296_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn call() -> Weight {
		(275_359_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acafbc76efb655f52a2] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a45e3386f1a83f00b28] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a96e4ef3ab80b5c3a5f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3d24875569a319056f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ad561e495f01c762] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3b624bb134596373c1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aadbe519bace97698b4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7e33b1a343f33065bd] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a626f271ae6979bbffe] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ce585fd4ae98b830b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac889c022f51a43b527] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f6353225ab0496d48] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab578892d355575c3e4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a02b4c8040b81dc785d] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a8d13a70c1e380292ea] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2e4d2fc709d989c778] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a6df81b28bd3ec99a3a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af54f74589657eac0fd] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a1849a3092175db4a2f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f05ecdc6c2c42c9fb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a24c3c0036dfb085bb9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a44d725ac77836eb10b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad04db6c692ab73d90d] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a873009d6cdb99c5a4c] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa958795fbfc2b5fa41] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a205b6f659d219c8cbc] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ade54b3bc3d3cdb1aeb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a538b748c1c5f92be98] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad50de2ad89aaa1e067] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a0576917f19ecaf2a3f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a5b44bd2793555a71e7] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc874645f7bbf62e62] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ae1b958a847e98bc8] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a396ae49d5311ee6bd1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa5d56999a2ebd1c4c9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a72f370c054587f81a5] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3a32934e459acb2ceb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac10fd56a5e084aae1c] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2ba8e27fcdbc3ab4f2] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4a75b804eec44f3f2a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ebb181fc616bfdb4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a9aaf019a62fd907a8a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a19730285453eb7702a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acced4c24d0ebee7c29] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae458a57da6a2a6280a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a83b9f09b407c57d07e] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc9fc095b3aaaef755] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a587ccf84053d9950ff] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a13d53bcf137f3784e9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abb79d34fb381ebd7c1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a935ea70a3e699d23b6] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a109fcd63aefdae75a1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abca8d937a761f2eb46] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a314c97ff9e866a835b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a691e4b5f67da0dea8e] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a127c680b864ee61620] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a148df8dfd47b4493f3] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a57c606ebe91374fcee] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acec20322704f7bec44] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abf6a27e09c6d0a9f0f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae2e8bdcf5850e20836] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab8399645bc39338a47] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a658619de90cae5dbe1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aeb9db1dfeed3a7b47b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abdc9db5edf43ffcb0d] (r:1 w:0)
	fn claim_surcharge(c: u32, ) -> Weight {
		(135_558_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((2_860_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(270_209_000 as Weight)
			// Standard Error: 700_000
			.saturating_add((363_114_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_address(r: u32, ) -> Weight {
		(342_353_000 as Weight)
			// Standard Error: 466_000
			.saturating_add((359_040_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(309_341_000 as Weight)
			// Standard Error: 523_000
			.saturating_add((355_882_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_balance(r: u32, ) -> Weight {
		(395_512_000 as Weight)
			// Standard Error: 736_000
			.saturating_add((617_968_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(350_418_000 as Weight)
			// Standard Error: 427_000
			.saturating_add((351_889_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(316_760_000 as Weight)
			// Standard Error: 638_000
			.saturating_add((354_662_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(336_168_000 as Weight)
			// Standard Error: 807_000
			.saturating_add((353_711_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(332_985_000 as Weight)
			// Standard Error: 1_350_000
			.saturating_add((354_808_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_block_number(r: u32, ) -> Weight {
		(340_298_000 as Weight)
			// Standard Error: 377_000
			.saturating_add((355_811_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(345_811_000 as Weight)
			// Standard Error: 391_000
			.saturating_add((352_175_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(350_136_000 as Weight)
			// Standard Error: 605_000
			.saturating_add((553_639_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas(r: u32, ) -> Weight {
		(313_206_000 as Weight)
			// Standard Error: 446_000
			.saturating_add((194_676_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input(_r: u32, ) -> Weight {
		(266_886_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(280_666_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_091_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return(r: u32, ) -> Weight {
		(246_709_000 as Weight)
			// Standard Error: 3_895_000
			.saturating_add((39_082_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(288_633_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((541_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(258_057_000 as Weight)
			// Standard Error: 1_614_000
			.saturating_add((139_230_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af3fd4cc2fc8d170b6d] (r:1 w:0)
	fn seal_restore_to(r: u32, ) -> Weight {
		(311_627_000 as Weight)
			// Standard Error: 1_602_000
			.saturating_add((133_583_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_restore_to_per_delta(d: u32, ) -> Weight {
		(293_186_000 as Weight)
			// Standard Error: 1_931_000
			.saturating_add((2_475_203_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(367_617_000 as Weight)
			// Standard Error: 706_000
			.saturating_add((728_941_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(378_232_000 as Weight)
			// Standard Error: 810_000
			.saturating_add((983_125_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:100 w:100)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_528_485_000 as Weight)
			// Standard Error: 3_632_000
			.saturating_add((542_754_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 715_000
			.saturating_add((158_018_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(308_772_000 as Weight)
			// Standard Error: 445_000
			.saturating_add((263_979_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_debug_message(r: u32, ) -> Weight {
		(288_794_000 as Weight)
			// Standard Error: 531_000
			.saturating_add((222_581_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(396_150_000 as Weight)
			// Standard Error: 705_000
			.saturating_add((625_327_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(903_526_000 as Weight)
			// Standard Error: 699_000
			.saturating_add((46_708_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(174_034_000 as Weight)
			// Standard Error: 1_770_000
			.saturating_add((1_140_377_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(254_586_000 as Weight)
			// Standard Error: 613_000
			.saturating_add((841_011_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(928_899_000 as Weight)
			// Standard Error: 801_000
			.saturating_add((96_065_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_transfer(r: u32, ) -> Weight {
		(268_870_000 as Weight)
			// Standard Error: 1_651_000
			.saturating_add((5_223_725_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 24_770_000
			.saturating_add((19_541_686_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: System Account (r:101 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(28_665_061_000 as Weight)
			// Standard Error: 289_240_000
			.saturating_add((3_479_153_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 103_000
			.saturating_add((39_897_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 110_000
			.saturating_add((66_181_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(205 as Weight))
			.saturating_add(T::DbWeight::get().writes(101 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 38_420_000
			.saturating_add((30_459_849_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: System Account (r:101 w:101)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(21_687_643_000 as Weight)
			// Standard Error: 131_000
			.saturating_add((45_430_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 131_000
			.saturating_add((72_656_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 131_000
			.saturating_add((197_556_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(206 as Weight))
			.saturating_add(T::DbWeight::get().writes(204 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(329_994_000 as Weight)
			// Standard Error: 469_000
			.saturating_add((324_178_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(687_111_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((472_129_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(298_723_000 as Weight)
			// Standard Error: 463_000
			.saturating_add((336_842_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(628_474_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((320_036_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(281_202_000 as Weight)
			// Standard Error: 557_000
			.saturating_add((308_068_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(749_425_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((136_471_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(343_669_000 as Weight)
			// Standard Error: 761_000
			.saturating_add((312_147_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(714_529_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((136_454_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(5_749_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((399_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(9_666_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((134_313_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(10_188_000 as Weight)
			// Standard Error: 167_000
			.saturating_add((207_638_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(5_735_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((5_642_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(5_727_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((5_688_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(5_701_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((3_601_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(5_775_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((5_045_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(5_649_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((12_551_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(18_118_000 as Weight)
			// Standard Error: 0
			.saturating_add((90_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(6_359_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((20_800_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(7_708_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((20_016_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(16_341_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_777_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(5_888_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((425_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(6_081_000 as Weight)
			// Standard Error: 98_000
			.saturating_add((556_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(5_950_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((1_339_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(17_229_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((580_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(17_064_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((1_131_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(9_947_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((14_603_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(9_976_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((6_458_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(5_794_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((4_712_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(5_755_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((4_638_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(5_957_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((1_278_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(5_780_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((2_257_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(5_733_000 as Weight)
			// Standard Error: 107_000
			.saturating_add((1_527_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(5_860_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((1_610_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(5_765_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((1_429_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(5_734_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((2_506_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(5_746_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((2_345_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(5_763_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((2_347_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(5_689_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((2_583_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(6_062_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((2_066_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(5_717_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((2_425_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(5_868_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((2_089_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(6_130_000 as Weight)
			// Standard Error: 86_000
			.saturating_add((1_922_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(5_719_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((2_393_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(5_751_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((2_554_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(5_698_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((2_259_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(5_905_000 as Weight)
			// Standard Error: 50_000
			.saturating_add((1_311_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(5_667_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((2_465_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(5_664_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((8_475_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(6_258_000 as Weight)
			// Standard Error: 124_000
			.saturating_add((6_918_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(5_717_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((13_956_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(5_713_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_458_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(5_751_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((2_310_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(5_806_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((2_032_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(5_877_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((2_036_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(5_789_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((1_984_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(5_885_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((1_905_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(5_865_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_967_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(5_696_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((2_107_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(5_914_000 as Weight)
			// Standard Error: 56_000
			.saturating_add((885_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(3_323_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_350_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(158_387_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((39_461_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	fn instrument(c: u32, ) -> Weight {
		(33_203_000 as Weight)
			// Standard Error: 110_000
			.saturating_add((76_504_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn code_load(c: u32, ) -> Weight {
		(6_741_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_669_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	fn code_refcount(c: u32, ) -> Weight {
		(10_937_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_694_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts AccountCounter (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(558_616_000 as Weight)
			// Standard Error: 294_000
			.saturating_add((381_602_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 19_000
			.saturating_add((2_309_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn instantiate(s: u32, ) -> Weight {
		(276_361_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_296_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn call() -> Weight {
		(275_359_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acafbc76efb655f52a2] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a45e3386f1a83f00b28] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a96e4ef3ab80b5c3a5f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3d24875569a319056f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ad561e495f01c762] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3b624bb134596373c1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aadbe519bace97698b4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7e33b1a343f33065bd] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a626f271ae6979bbffe] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ce585fd4ae98b830b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac889c022f51a43b527] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f6353225ab0496d48] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab578892d355575c3e4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a02b4c8040b81dc785d] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a8d13a70c1e380292ea] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2e4d2fc709d989c778] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a6df81b28bd3ec99a3a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af54f74589657eac0fd] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a1849a3092175db4a2f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f05ecdc6c2c42c9fb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a24c3c0036dfb085bb9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a44d725ac77836eb10b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad04db6c692ab73d90d] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a873009d6cdb99c5a4c] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa958795fbfc2b5fa41] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a205b6f659d219c8cbc] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ade54b3bc3d3cdb1aeb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a538b748c1c5f92be98] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad50de2ad89aaa1e067] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a0576917f19ecaf2a3f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a5b44bd2793555a71e7] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc874645f7bbf62e62] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ae1b958a847e98bc8] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a396ae49d5311ee6bd1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa5d56999a2ebd1c4c9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a72f370c054587f81a5] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3a32934e459acb2ceb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac10fd56a5e084aae1c] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2ba8e27fcdbc3ab4f2] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4a75b804eec44f3f2a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ebb181fc616bfdb4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a9aaf019a62fd907a8a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a19730285453eb7702a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acced4c24d0ebee7c29] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae458a57da6a2a6280a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a83b9f09b407c57d07e] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc9fc095b3aaaef755] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a587ccf84053d9950ff] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a13d53bcf137f3784e9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abb79d34fb381ebd7c1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a935ea70a3e699d23b6] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a109fcd63aefdae75a1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abca8d937a761f2eb46] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a314c97ff9e866a835b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a691e4b5f67da0dea8e] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a127c680b864ee61620] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a148df8dfd47b4493f3] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a57c606ebe91374fcee] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acec20322704f7bec44] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abf6a27e09c6d0a9f0f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae2e8bdcf5850e20836] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab8399645bc39338a47] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a658619de90cae5dbe1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aeb9db1dfeed3a7b47b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abdc9db5edf43ffcb0d] (r:1 w:0)
	fn claim_surcharge(c: u32, ) -> Weight {
		(135_558_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((2_860_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(270_209_000 as Weight)
			// Standard Error: 700_000
			.saturating_add((363_114_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_address(r: u32, ) -> Weight {
		(342_353_000 as Weight)
			// Standard Error: 466_000
			.saturating_add((359_040_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(309_341_000 as Weight)
			// Standard Error: 523_000
			.saturating_add((355_882_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_balance(r: u32, ) -> Weight {
		(395_512_000 as Weight)
			// Standard Error: 736_000
			.saturating_add((617_968_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(350_418_000 as Weight)
			// Standard Error: 427_000
			.saturating_add((351_889_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(316_760_000 as Weight)
			// Standard Error: 638_000
			.saturating_add((354_662_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(336_168_000 as Weight)
			// Standard Error: 807_000
			.saturating_add((353_711_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(332_985_000 as Weight)
			// Standard Error: 1_350_000
			.saturating_add((354_808_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_block_number(r: u32, ) -> Weight {
		(340_298_000 as Weight)
			// Standard Error: 377_000
			.saturating_add((355_811_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(345_811_000 as Weight)
			// Standard Error: 391_000
			.saturating_add((352_175_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(350_136_000 as Weight)
			// Standard Error: 605_000
			.saturating_add((553_639_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas(r: u32, ) -> Weight {
		(313_206_000 as Weight)
			// Standard Error: 446_000
			.saturating_add((194_676_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input(_r: u32, ) -> Weight {
		(266_886_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(280_666_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_091_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return(r: u32, ) -> Weight {
		(246_709_000 as Weight)
			// Standard Error: 3_895_000
			.saturating_add((39_082_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(288_633_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((541_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(258_057_000 as Weight)
			// Standard Error: 1_614_000
			.saturating_add((139_230_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af3fd4cc2fc8d170b6d] (r:1 w:0)
	fn seal_restore_to(r: u32, ) -> Weight {
		(311_627_000 as Weight)
			// Standard Error: 1_602_000
			.saturating_add((133_583_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_restore_to_per_delta(d: u32, ) -> Weight {
		(293_186_000 as Weight)
			// Standard Error: 1_931_000
			.saturating_add((2_475_203_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(367_617_000 as Weight)
			// Standard Error: 706_000
			.saturating_add((728_941_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(378_232_000 as Weight)
			// Standard Error: 810_000
			.saturating_add((983_125_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:100 w:100)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_528_485_000 as Weight)
			// Standard Error: 3_632_000
			.saturating_add((542_754_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 715_000
			.saturating_add((158_018_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(308_772_000 as Weight)
			// Standard Error: 445_000
			.saturating_add((263_979_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_debug_message(r: u32, ) -> Weight {
		(288_794_000 as Weight)
			// Standard Error: 531_000
			.saturating_add((222_581_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(396_150_000 as Weight)
			// Standard Error: 705_000
			.saturating_add((625_327_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(903_526_000 as Weight)
			// Standard Error: 699_000
			.saturating_add((46_708_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(174_034_000 as Weight)
			// Standard Error: 1_770_000
			.saturating_add((1_140_377_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(254_586_000 as Weight)
			// Standard Error: 613_000
			.saturating_add((841_011_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(928_899_000 as Weight)
			// Standard Error: 801_000
			.saturating_add((96_065_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_transfer(r: u32, ) -> Weight {
		(268_870_000 as Weight)
			// Standard Error: 1_651_000
			.saturating_add((5_223_725_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 24_770_000
			.saturating_add((19_541_686_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: System Account (r:101 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(28_665_061_000 as Weight)
			// Standard Error: 289_240_000
			.saturating_add((3_479_153_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 103_000
			.saturating_add((39_897_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 110_000
			.saturating_add((66_181_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(205 as Weight))
			.saturating_add(RocksDbWeight::get().writes(101 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 38_420_000
			.saturating_add((30_459_849_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: System Account (r:101 w:101)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(21_687_643_000 as Weight)
			// Standard Error: 131_000
			.saturating_add((45_430_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 131_000
			.saturating_add((72_656_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 131_000
			.saturating_add((197_556_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(206 as Weight))
			.saturating_add(RocksDbWeight::get().writes(204 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(329_994_000 as Weight)
			// Standard Error: 469_000
			.saturating_add((324_178_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(687_111_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((472_129_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(298_723_000 as Weight)
			// Standard Error: 463_000
			.saturating_add((336_842_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(628_474_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((320_036_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(281_202_000 as Weight)
			// Standard Error: 557_000
			.saturating_add((308_068_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(749_425_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((136_471_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(343_669_000 as Weight)
			// Standard Error: 761_000
			.saturating_add((312_147_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(714_529_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((136_454_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(5_749_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((399_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(9_666_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((134_313_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(10_188_000 as Weight)
			// Standard Error: 167_000
			.saturating_add((207_638_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(5_735_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((5_642_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(5_727_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((5_688_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(5_701_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((3_601_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(5_775_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((5_045_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(5_649_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((12_551_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(18_118_000 as Weight)
			// Standard Error: 0
			.saturating_add((90_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(6_359_000 as Weight)
			// Standard Error: 68_000
			.saturating_add((20_800_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(7_708_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((20_016_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(16_341_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_777_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(5_888_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((425_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(6_081_000 as Weight)
			// Standard Error: 98_000
			.saturating_add((556_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(5_950_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((1_339_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(17_229_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((580_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(17_064_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((1_131_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(9_947_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((14_603_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(9_976_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((6_458_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(5_794_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((4_712_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(5_755_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((4_638_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(5_957_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((1_278_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(5_780_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((2_257_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(5_733_000 as Weight)
			// Standard Error: 107_000
			.saturating_add((1_527_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(5_860_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((1_610_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(5_765_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((1_429_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(5_734_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((2_506_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(5_746_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((2_345_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(5_763_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((2_347_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(5_689_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((2_583_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(6_062_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((2_066_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(5_717_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((2_425_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(5_868_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((2_089_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(6_130_000 as Weight)
			// Standard Error: 86_000
			.saturating_add((1_922_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(5_719_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((2_393_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(5_751_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((2_554_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(5_698_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((2_259_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(5_905_000 as Weight)
			// Standard Error: 50_000
			.saturating_add((1_311_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(5_667_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((2_465_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(5_664_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((8_475_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(6_258_000 as Weight)
			// Standard Error: 124_000
			.saturating_add((6_918_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(5_717_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((13_956_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(5_713_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_458_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(5_751_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((2_310_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(5_806_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((2_032_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(5_877_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((2_036_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(5_789_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((1_984_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(5_885_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((1_905_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(5_865_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_967_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(5_696_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((2_107_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(5_914_000 as Weight)
			// Standard Error: 56_000
			.saturating_add((885_000 as Weight).saturating_mul(r as Weight))
	}
}
